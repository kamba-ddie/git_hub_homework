THEORY QUESTIONS ASSIGNMENT 
Python based theory
To be completed at student’s own pace and submitted before given deadline 


1. Python theory questions 
30 points 
What is Python and what are its main features? 
Python is an object oriented programming language 
Its main features are its readability, the fact it is interactive and interpreted and the fact it is open source

DiscussthedifferencebetweenPython2andPython3 
Python 2 is an older legacy code compared to Python3. Python 3 is supposedly easier to learn and readability is a big difference. The storing functions are different as well as the ordering rules. 

What is PEP 8? 
PEP 8 stands for python enterprise proposal and is a coding style guide for Python. It is what helps the readability of python

In computing/computer science what is a program? 
A set of ordered operations for a computer to perform a specific task

In computing / computer science what is a process? 
Is an instance of a program running on a computer

In computing / computer science what is cache? 
It is a small amount of memory which is part of the CPU, it is used to temporarily hold instructions the CPU may use again.

In computing / computer science what is a thread and what do we mean by multithreading? 
A thread is a self contained sequence of instructions that is executed in parallel with other threads that all come from the same core process
Multithreading then is having multiple instruction threads executed at the same time using the same set of instructions from the same root.

In computing / computer science what is concurrency and parallelism and what are the differences? 
Concurrency is when multiple tasks are progressing from the same CPU and parallelism is having multiple tasks being completed/progressing from multiple CPU’s/ threads.

What is GIL in Python and how does it work? 
GIL stands for global interpreter lock, it limits access to python objects. Which keeps the threads safe if variables changed during processing.

What do these software development principles mean: DRY, KISS, BDUF 
DRY, stands for don’t repeat yourself. i.e. if there are repeated logics you should put it in a function instead of rewriting
KISS, keep it simple stupid, try not to over complicate code and streamline it
BDUF, big design up front, keep designs simple and modest, start projects small and iterate it afterwards.

What is a Garbage Collector in Python and how does it work? 
This deletes unwanted objects that are no longer being used to free up memory.

How is memory managed in Python? 
Memory is managed by creating a private heap of all the data structures and objects that are in use which can be accessed by python and is maintained by a memory manager

What is a Python module? 
Any file that has .py at the end, that allows you to import other functions into your file.

What is docstring in Python? 
It is a string literal multiline comment that is at the start of a function or class. On its own it is ignored by the python executer, it needs 3 quotation marks at the start and end. It can be referenced with “__docstringname___”.

What is pickling and unpickling in Python? Example usage. 
Pickling is a module that allows you to convert data into binary and save it as a text file. Unpickling allows you to convert this binary text file into readable python data. For example a large list of customers into a more secure less memory consuming data file. 

What are the tools that help to find bugs or perform static analysis? 
The module pdb has to be imported to debug, mypy performs static analysis. 

How are arguments passed in Python by value or by reference? Give an example. 
it is passed by value, arguments are in the parenthesis at the start of a function. An example could be, def function(hello_world) where hello world refers to the value being passed

18.    What are Dictionary and List comprehensions in Python? Provide examples.
 List comprehensions are a simpler concise way to iterate over a list using shorter syntax
 for x in list: 
 print(x)
 Similar to lists, dictionary comprehension allows you iterate over a dictionary with simpler syntax 
 Dictionary= {"one":1 ,"two":2}  
for x in Dictionary:
print(Dictionary[x])

19. What is namespace in Python?
Dictionary of names of everything defined where variable name is the key and the values are the values.

20. What is pass in Python?
Is a placeholder for code being implemented in the future

21. What is unit test in Python?
A test that checks a singular component of code, it becomes a function to ensure the code runs as it is expected to.

22. In Python what is slicing?
Slicing is a function that returns a sliced object. This can also have an inputted range of which characters you want to slice.

23. What is a negative index in Python?
An index referenced from the end of a string going backwards, so -1 would be the last character, and -2 the second last and so on.

24. How can the ternary operators be used in python? Give an example.
Ternary operators, use the syntax, and if, else, or, and are written in their text format to aid in readability. x = 10
 
if x == 10  or x == 9 and x == 10:
    print(x)

25.  What does this mean: *args, **kwargs? And why would we use it?
Args is short for argument and kwargs is short for keyword argument, its used when you want to run multiple arguments through a function, and kwargs used named arguments.

26. How are range and xrange different from one another?
Range(), uses more memory and saves every element of a list, and Xrange uses less memory and only takes one element of a list at a time. 

27. What is Flask and what can we use it for?
A micro web framework that gets written in python, it can be used to make websites quick and easily as well as test API’s

28. What are clustered and non-clustered index in a relational database? 
A clustered index is used to define the order/sort a table and arrange its data in alphabetical order. A non clustered collects it in one place and records it all at another place.

29. What is a ‘deadlock’ a relational database?
                  When two or more processes lock separate resources so cannot progress, as they are waiting for the resources to be released. 

30. What is a ‘livelock’ a relational database? 
This is when the processes rely on each other but can never finish the task

  


	
 
2. Python string methods:describe each method and provide an example
Method
Description
Example
Capitalize()
Returns a string with the first letter capitalized and the other letters lower case
txt = “hello world”
x = txt.capitalize()
Output ="Hello world"


Casefold()
Returns a string where all the letters are lower case
txt = "Hello, World!"

x = txt.casefold()

print(x)
Output = “hello, world!”




Center()
Thismethod will center align the string, using a specified character usually a space as the character which fills the space.
txt = "banana"

x = txt.center(4)

print(x)

Output =”    banana    “ 

        
Count()
 This method returns the number of times a specified value appears in the string.
txt = "I enjoy eating cakes”
x=txt.count("cakes")

print(x)


Endswith()
 This method returns True if the string ends with the specified value, otherwise False.
txt = "Hello, world."

x = txt.endswith(".")

print(x)



Find()
This method finds the first occurrence of the specified value.
txt = "Hello, world."

x = txt.find("welcome")

print(x)
 
Format()
 This function formats a specified value into a specified format.
x = format(0.8, '%')

print(x)


Index()
 This method returns the position at the first time of the specified value
cakes = ['brownies', 'victoria_sponge', 'cherry_bakewell']

x = cakes.index("cherry_bakewell")

print(x)
#Output = 2
 
isanum()
Returns true if all characters are either a number or a letter, being alphanumeric
txt = "Item67"

x = txt.isalnum()

print(x)
#Output = TRUE


isalpha()
Returns true if all characters are letters
txt = "ItemA"

x = txt.isalpha()

print(x)
#Output= True


isdigit()
Returns true if all characters are numbers
txt = "123445"

x = txt.isdigit()

print(x)
#Output= True
islower()
Returns true if all characters are lower case, otherwise it is false.
txt = "hello world!"

x = txt.islower()

print(x)

#Output = True
isnumeric()
Returns true if all characters are numerical.
txt = "123345"

x = txt.isnumeric()

print(x)
#Output = TRUE


isspace()
Returns true if all the characters in a string are whitespaces otherwise false
txt = "     "

x = txt.isspace()

print(x)
#OUTPUT = TRUE


istitle()
This method returns True if all the characters in text start with a upper case letter, and the rest of the word are lower case letters, otherwise False
txt = "Hello World!"

x = txt.istitle()

print(x)
#Output = TRUE


isupper()
Returns true if all letters return as uppercase, otherwise I think it is false.
txt = "HELLO WORLD!"

x = txt.isupper()

print(x)
#Output = TRUE


join()
This method joins all the iterables into one single string
myTuple = ("Cake", "Brownie", "Trifle")

x = "battenburg".join(myTuple)

print(x)
#output = Cake, Brownie,Trifle,battenburg


lower()
Returns the string where all the letters are lower case
txt = "Hello WORLD"

x = txt.lower()

print(x)
#Output = hello world


lstrip()
This method removes the leading characters from a string, usually these are spaces
txt = "     chocolate     "

x = txt.lstrip()

print("the best kind of cake is ", x)
#Output = 
The best kind of cake is chocolate


replace()
This replaces a specific phrase with another one listed
txt = "I like cherries"

x = txt.replace("cherries", "pineapples")

print(x)
#Output= “ I like pineapples


rsplit()
This splits a string into a list 
txt = "this is a split"

x = txt.split()

print(x)
#Output
['this', 'is', 'a', 'split']


split()
This splits a string into list starting from the right
txt = "this is a rsplit"

x = txt.split()

print(x)
#Output
['this', 'is', 'a', 'rsplit']


splitlines()
This splits a string done at the line breaks
txt = "Hello world\nAlso hello world"

x = txt.splitlines()

print(x)
#Output -['Hello world','also hello world']


startswith()
This method returns True if the string starts with the specified value, otherwise False.
txt = "Hello world."

x = txt.startswith("Hello")

print(x)

#Output = true
strip()
Removes any trailing or leading characters, (this are usually spaces). 
txt = "     chocolate     "

x = txt.lstrip()

print("the best kind of cake is ", x)
#Output = 
The best kind of cake is chocolate
swapcase()
This swaps the lower and upper case letters in a string
txt = "Hello WoRlD"

x = txt.swapcase()

print(x)
#Output = hELLO wOrld



title()
Returns a string where the first character in each word string is upper case. 
txt = "hello world"

x = txt.swapcase()

print(x)
#Output = Hello World


upper()
Returns a string where all the characters are upper case
txt = "hello world"

x = txt.upper()

print(x)
#Output = HELLO WORLD



 

3. Python list methods: describe each method and provide an example
Method
Description
Example
append() 

 
Add a element to the end of an list
list = [1,2,3,4,5]

list.append(6)

print(list)

# output = [1, 2, 3, 4, 5, 6]
 


clear() 
Clear all elements in a list
list = [1,2,3,4,5]

list.clear()

print(list)

# output = []
 
Copy()
Makes a literal copy of a list at the point of declaration, changes made to the original list after this point won't be reflected in the second
list = [1,2,3,4,5]

list2 = list.copy()

print(list2)

# output = [1,2,3,4,5]


Count()
Counts the amount of times the args is present in the list 
list = [1,2,2,3,4,5]

x = list.count(2)

print(x)

# output = 2
 
Extend()
Adds the elements of one list to another list
list1 = [1,2,3,4,5]
list2 = [6,7,8]

list1.extend(list2)

print(list1)

# output = [1, 2, 3, 4, 5, 6, 7, 8]
 
Index()
Finds the index value of the argument if it is present. Only returns first instance. Raises a Value error if not present
list1 = ["Zero", "One", "Two", "Three"]

x = list1.index("Two")

print(x)

# output = 2
 
Insert()
Takes a index and a value, and inserts the element at the index given
list1 = ["Zero", "One", "Two", "Three"]

list1.insert(1,"Hello World")

print(list1)

# output = ['Zero', 'Hello World', 'One', 'Two', 'Three']
 
Pop()
Takes a index and removes the element at the index 
list1 = ["Zero", "One", "Two", "Three"]

list1.pop(1)

print(list1)

# output = ['Zero', 'Two', 'Three']
 
Remove()
Removes the element inputted from the list. Only removes the first instance of the element 
list1 = ["Zero", "One", "Two", "Three"]

list1.remove("Two")

print(list1)

# output = ['Zero', 'One', 'Three']
Reverse()
Reverses the order of the list
list1 = ["Zero", "One", "Two", "Three"]

list1.reverse()

print(list1)

# output = ['Three', 'Two', 'One', 'Zero']
Sort()
Sorts the list alphabetically 
list1 = ["Zero", "One", "Two", "Three"]

list1.sort()

print(list1)

# output = ['One', 'Three', 'Two', 'Zero']





4. Python tuple methods: describe each method and provide an example
Method
Description
Example
count() 

 
Counts all the instances of the argument in the tuple
tuple = (1, 2, 2, 3 ,4 ,5)

x = tuple.count(2)

print(x)

# output = 2



index() 
Finds the index value of the argument if it is present. Only returns the first instance. Raises a Value error if not present
tuple = (1, 2, 6, 3 ,4 ,5)

x = tuple.index(2)

print(x)

# output = 1





5. Python dictionary methods: describe each method and provide an example

Method
Description
Example
clear() 

 
Clear all elements in a dictionary
dictionary = {1: "Hello", 2: "World", 3: "!"}

dictionary.clear()

print(dictionary)

# output = {}


copy() 
Makes a literal copy of a dictionary at the point of declaration, changes made to the original list after this point won't be reflected in the second
dictionary = {1: "Hello", 2: "World", 3: "!"}

dictionary2 = dictionary.copy()

print(dictionary2)

# output = {1: 'Hello', 2: 'World', 3: '!'}


fromkeys()
Creates a dictionary from two arguments, with the first making up the keys and the second consisting of the values for each key
x = [1,2,3,4]
y = "Hello World"

newDictionary = dict.fromkeys(x,y)

print(newDictionary)

# output = {1: 'Hello World', 2: 'Hello World', 3: 'Hello World', 4: 'Hello World'}


get()
Returns the value associated with the key entered into the function
dictionary = {1: "Hello", 2: "World", 3: "!"}

x = dictionary.get(2)

print(x)

# output = World


items()
Returns the keys and their associated values of the dictionary. Reflects any changes to the dictionary
dictionary = {1: "Hello", 2: "World", 3: "!"}

x = dictionary.items()

print(x)

# output = dict_items([(1, 'Hello'), (2, 'World'), (3, '!')])



keys()
Returns the keys of the dictionary. Reflects any changes to the dictionary


dictionary = {1: "Hello", 2: "World", 3: "!"}

x = dictionary.keys()

print(x)

# output = dict_keys([1, 2, 3])



pop()
Removes the key inputted into the function and its associated value from the dictionary
dictionary = {1: "Hello", 2: "World", 3: "!"}

x = dictionary.pop(2)

print(dictionary)

# output = {1: 'Hello', 3: '!'}



popitems()
Removes the last key and value from the dictionary. Also returns this pair as a value that can be given a value.
dictionary = {1: "Hello", 2: "World", 3: "!"}

x = dictionary.popitem()

print(dictionary)
print(x)

# output = {1: 'Hello', 2: 'World'}
# output = (3, '!')



setdefault()
Returns the key and the value from the dictionary that is inserted into the function. If these are not present in the dictionary it also inserts them in before returning the value
dictionary = {1: "Hello", 2: "World", 3: "!"}

y = dictionary.setdefault(1, "Hello")
x = dictionary.setdefault(4, "New input")

print(y)
print(x)
print(dictionary)

# output = Hello
# output = New Input
# output = {1: 'Hello', 2: 'World', 3: '!', 4: 'New input'}




Update()
Inserts the dictionary key and value into the dictionary.
dictionary = {1: "Hello", 2: "World", 3: "!"}

dictionary.update({"4": "New input"})

print(dictionary)

# output = {1: 'Hello', 2: 'World', 3: '!', 4: 'New input'}




values()
Returns a view object of the dictionary’s values as a list
dictionary = {1: "Hello", 2: "World", 3: "!"}

x = dictionary.values()

print(x)

# output = dict_values(['Hello', 'World', '!'])









6. Python set methods:describe each method and provide an example
Method
Description
Example
add()
Adds an element into a set
cakes = ['brownies', 'victoria_sponge', 'cherry_bakewell']

cakes.add("trifle")

print(cakes)
Output = brownies, victoria_sponge, cherry_bakewell,trifle



clear()
This removes all elements in a set
akes = ['brownies', 'victoria_sponge', 'cherry_bakewell']

cakes.clear

print(cakes)
#Output = 
copy()
This copies the set 
cakes = ['brownies', 'victoria_sponge', 'cherry_bakewell']

cakes.copy
print(cakes)
Output ​​
brownies', 'victoria_sponge', 'cherry_bakewell



difference()
This returns the difference between two sets 
x = {'brownies', 'victoria_sponge', 'cherry_bakewell'}
y = {"google", "brownies", "apple"}

z = x.difference(y)

print(z)

#Output = victoria_sponge, cherry_bakewell


intersection()
This methods returns the similarities between two or more sets. 
x = {'brownies', 'victoria_sponge', 'cherry_bakewell'}
y = {"google", "brownies", "apple"}

z = x.intersection(y)

print(z)

#Output = brownies


issubset(0
This method returns true if all the items in a subset can be located inside a specified set
x = {"ab", "bc", "cd"}
y = {"fg", "ef", "de", "cd", "bc", "ab"}

z = x.issubset(y)

print(z)
#Output = TRUE


issuperset()
This method returns true if all the items in the specified set exist within the original set
x = {"fg", "ef", "de", "cd", "bc", "ab"}
y = {"ab", "bc", "cd"}

z = x.issupersett(y)

print(z)


pop()
This method removes any random item from a set
cakes = ['brownies', 'victoria_sponge', 'cherry_bakewell']

cakes.pop

print(cakes)
#Output= brownies, cherry_bakewell


remove()
This method removes a specific item from a set 
cakes = ['brownies', 'victoria_sponge', 'cherry_bakewell']

cakes.remove("victoria_sponge")

print(cakes)
Output= brownies, cherry_bakewell


symmetric_difference()
This will return the items in multiple sets but will not return the items that can be found in both sets.
x = {'brownies', 'victoria_sponge', 'cherry_bakewell'}
y = {"google", "brownies", "apple"}

z = x.symmetric_difference(y)

print(z)

#Output = victoria_sponge', 'cherry_bakewell','google', 'apple'


union()
This returns a set of all the items in both sets

x = {'brownies', 'victoria_sponge', 'cherry_bakewell'}
y = {"google", "brownies", "apple"}

z = x.union(y)

print(z)

#Output ='brownies' 'victoria_sponge', 'cherry_bakewell','google','brownies', 'apple’


update()
This method adds the contents of one set into another one.
x = {'brownies', 'victoria_sponge', 'cherry_bakewell'}
y = {"google", "brownies", "apple"}

z = x.update(y)

print(z)

#Output ='brownies' 'victoria_sponge', 'cherry_bakewell','google','brownies', 'apple'





7. Python file methods: describe each method and provide an example
Method
Description
Example
read() 

 
Reads the contents of the inputted text file
f = open("text.txt", "r")
print(f.read())

# output = Hello World


readline() 
Reads the first line of the inputted text file
f = open("text.txt", "r")
print(f.readline())

# output = Hello


readlines()
Reads all the lines from a text file and outputs them as a list of strings
f = open("text.txt", "r")
print(f.readlines())

# output = ['Hello \n', 'World']


write()
Writes a string to an inputted text file. If opened with a appends text, if opened with w overwrites text
f = open("text.txt", "a")
f.write("Hello World")

r = open("text.txt", "r")
print(r.read())


# output = Hello WorldHello World



writelines()
Similar to write method, writes a list of strings to a inputted text file, appending opened with a and overwriting if opened with w
f = open("text.txt", "a")
f.writelines(["Hello", "World"])

r = open("text.txt", "r")
print(r.read())
# output = Hello WorldHello WorldHelloWorld




